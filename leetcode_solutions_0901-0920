905. Sort Array By Parity

class Solution:
    def sortArrayByParity(self, A):
        """
        :type A: List[int]
        :rtype: List[int]
        """
        even = []
        odd = []
        for item in A:
            if item % 2 == 0:
                even.append(item)
            else:
                odd.append(item)
        even.extend(odd)  
        return even
        
908. Smallest Range I

class Solution:
    def smallestRangeI(self, A, K):
        """
        :type A: List[int]
        :type K: int
        :rtype: int
        """
        small = min(A)
        large = max(A)
        if large - small > 2*K:
            return large - small - 2*K
        else:
            return 0
            
  914. X of a Kind in a Deck of Cards
  
  class Solution:
    def hasGroupsSizeX(self, deck):
        """
        :type deck: List[int]
        :rtype: bool
        """
        ls = len(deck)
        if ls < 2:
            return False
        
        aux_dict = dict()
        for item in deck:
            if item not in aux_dict:
                aux_dict[item] = 1
            else:
                aux_dict[item] += 1
        
        counts = [v for k, v in aux_dict.items()]
        
        smallest = min(counts)
        if smallest < 2:
            return False
        
        factor = 2
        check = True
        while factor <= smallest and check:
            if not self.common_factor(counts, factor):
                factor += 1
            else:
                check = False
        return not check
            
        
    
    
    def common_factor(self, nums, factor):
        
        check = True
        i = 0
        while i < len(nums) and check:
            if nums[i] % factor != 0:
                check = False
            i += 1
        return check
        
916. Word Subsets

from collections import Counter
class Solution:
    def wordSubsets(self, A, B):
        """
        :type A: List[str]
        :type B: List[str]
        :rtype: List[str]
        """
        if not A:
            return []
        
        c = Counter()
        for word in B:
            c |= Counter(word)
        
        res = []
        for word in A:
            tmp = Counter()
            tmp |= c
            for char in word:
                if tmp[char] != 0:
                    tmp[char] -= 1
            if sum(tmp.values()) == 0:
                res.append(word)
        
        return res
        
class Solution:
    def wordSubsets(self, A, B):
        """
        :type A: List[str]
        :type B: List[str]
        :rtype: List[str]
        """
        B_counter = collections.Counter()
        for b in B:
            for c, n in collections.Counter(b).items():
                B_counter[c] = max(B_counter[c], n)
        
        res = []
        for a in A:
            count = collections.Counter(a)
            if all(count[c]>=B_counter[c] for c in B_counter):
                res.append(a)
        return res        
        
 917. Reverse Only Letters
 
 class Solution(object):
    def reverseOnlyLetters(self, S):
        """
        :type S: str
        :rtype: str
        """
        
            
        if len(S) < 2:
            return S
        s = 0
        for item in S:
            if item.isalpha():
                s += 1
        if s < 2:
            return S
        aux_list = list(S)
        i = 0
        j = len(S) - 1
        while i < j :
            while not aux_list[i].isalpha():
                i += 1
            while not aux_list[j].isalpha():
                j -= 1
            if i < j:
                aux_list[i], aux_list[j] = aux_list[j], aux_list[i]
            i += 1
            j -= 1
        return ''.join(aux_list)
        
 class Solution(object):
    def reverseOnlyLetters(self, S):
        """
        :type S: str
        :rtype: str
        """
        
            
        if len(S) < 2:
            return S
        s = 0
        for item in S:
            if item.isalpha():
                s += 1
        if s < 2:
            return S
        aux_list = list(S)
        i = 0
        j = len(S) - 1
        while i < j :
            while not aux_list[i].isalpha():
                i += 1
            while not aux_list[j].isalpha():
                j -= 1
            if i < j:
                aux_list[i], aux_list[j] = aux_list[j], aux_list[i]
            i += 1
            j -= 1
        return ''.join(aux_list)
        
 class Solution(object):
    def reverseOnlyLetters(self, S):
        """
        :type S: str
        :rtype: str
        """
        
        lst = list(reversed([char for char in S if char.isalpha()]))
        for cnt, char in enumerate(S):
            if not char.isalpha():
                lst.insert(cnt, char)
        return "".join(lst)
        
 
