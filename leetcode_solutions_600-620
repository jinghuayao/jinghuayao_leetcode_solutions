605. Can Place Flowers

class Solution:
    def canPlaceFlowers(self, flowerbed, n):
        """
        :type flowerbed: List[int]
        :type n: int
        :rtype: bool
        """
        flowerbed = [0] + flowerbed + [0]
        ls = len(flowerbed)
        count = 0
        for i in range(1, ls-1):
            if flowerbed[i] == 1:
                continue
            else:
                if flowerbed[i-1] == 0 and flowerbed[i+1] == 0:
                    count += 1
                    flowerbed[i] = 1
        return n <= count
        
606. Construct String from Binary Tree

class Solution:
    def tree2str(self, t):
        """
        :type t: TreeNode
        :rtype: str
        """
        if not t:
            return ""
        elif not t.left and not t.right:
            return str(t.val)
        elif t.left and not t.right:
            return str(t.val) + '(' + self.tree2str(t.left) + ')'
        elif not t.left and t.right:
            return str(t.val) + '()' + '(' + self.tree2str(t.right) + ')'
        else:
            return str(t.val) + '(' + self.tree2str(t.left) + ')' + '(' + self.tree2str(t.right) + ')'
            
# USE regular expression
class Solution:
    def tree2str(self, t):
        """
        :type t: TreeNode
        :rtype: str
        """
        if not t:
            return str()
        l = self.tree2str(t.left)
        r = self.tree2str(t.right)
        cur = str(t.val)
        if l or r:
            cur += "(%s)" % l
        if r:
            cur += '(%s)' % r
        return cur 
        
 617. Merge Two Binary Trees
 
 # Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution:
    def mergeTrees(self, t1, t2):
        """
        :type t1: TreeNode
        :type t2: TreeNode
        :rtype: TreeNode
        """
        if not t1 and not t2:
            return
        elif t1:
            current = t1
            if not t2:
                return current
            current.val = t1.val + t2.val
            current.left = self.mergeTrees(t1.left, t2.left)
            current.right = self.mergeTrees(t1.right, t2.right)
            
        elif t2:
            current = t2
            if not t1:
                return current
            current.val = t2.val + t1.val
            current.left = self.merge(t2.left, t1.left)
            current.right = self.merge(t2.right, t1.right)
        
        return current
        
class Solution:
    def mergeTrees(self, t1, t2):
        """
        :type t1: TreeNode
        :type t2: TreeNode
        :rtype: TreeNode
        """
        if not t1 and not t2:
            return
        elif t1 and not t2:
            return t1
        elif t2 and not t1:
            return t2
        else:
            current = t1
            current.val = t1.val + t2.val
            current.left = self.mergeTrees(t1.left, t2.left)
            current.right = self.mergeTrees(t1.right, t2.right)
            return current
            
 class Solution:
    def mergeTrees(self, t1, t2):
        """
        :type t1: TreeNode
        :type t2: TreeNode
        :rtype: TreeNode
        """
        if not t1:
            return t2
        elif not t2:
            return t1
        else:
            t1.val = t1.val + t2.val
            t1.left = self.mergeTrees(t1.left, t2.left)
            t1.right = self.mergeTrees(t1.right, t2.right)
            return t1
            
            
            
