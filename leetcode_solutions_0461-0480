461. Hamming Distance

class Solution(object):
    def hammingDistance(self, x, y):
        """
        :type x: int
        :type y: int
        :rtype: int
        """
        lst_x = list()
        while x > 0:
            lst_x.append(x%2)
            x //= 2
        lst_y = list()
        while y > 0:
            lst_y.append(y%2)
            y //= 2
        
        if  len(lst_x) < len(lst_y):
            lst_x, lst_y = lst_y, lst_x
        diff = 0
        m = len(lst_x)
        n = len(lst_y)
        for i in range(n):
            if lst_x[i] != lst_y[i]:
                diff += 1
        for j in range(n, m):
            if lst_x[j] == 1:
                diff += 1
        return diff
        
462. Minimum Moves to Equal Array Elements II

class Solution(object):
    def minMoves2(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        nums = sorted(nums)
        mid_num = nums[len(nums)//2]
        
        return sum([abs(num - mid_num) for num in nums])
        
class Solution(object):
    def minMoves2(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        nums = sorted(nums)
        mid_num = nums[len(nums)//2]
        res = 0
        for num in nums:
            res += abs(num-mid_num)
        return res
        
 class Solution(object):
    def minMoves2(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        nums = sorted(nums)
        mid_num = nums[len(nums)//2]
        res = 0
        for num in nums:
            res += abs(num-mid_num)
        return res
        
 463. Island Perimeter
 
 class Solution:
    def islandPerimeter(self, grid):
        """
        :type grid: List[List[int]]
        :rtype: int
        """
        m = len(grid)
        n = len(grid[0])
        for item in grid:
            item.insert(0, 0)
            item.append(0)
        grid.insert(0, [0]*(n+2))
        grid.append([0]*(n+2))
        
        
        count = 0
        for i in range(1, m+2-1):
            for j in range(1, n+2-1):
                if grid[i][j] == 1:
                    
                    if grid[i-1][j] == 0:
                        count += 1
                    if grid[i+1][j] == 0:
                        count += 1
                    if grid[i][j+1] == 0:
                        count += 1
                    if grid[i][j-1] == 0:
                        count += 1
        return count
        
475. Heaters

class Solution:
    def findRadius(self, houses, heaters):
        """
        :type houses: List[int]
        :type heaters: List[int]
        :rtype: int
        """
        if not houses:
            return 0
        elif not heaters:
            return float('inf')
    
        h1 = sorted(houses)
        h2 = sorted(heaters)
        m, n = len(h1), len(h2)
        ans = 0
        i, j = 0, 0
        while i < m:
            if j + 1 == n:
                radius = abs(h1[i] - h2[j])
            else:
                while j + 1 < n and h1[i] > h2[j+1]:
                    j += 1
                if j + 1 == n:
                    radius = abs(h1[i] - h2[j])
                else:
                    radius = min(abs(h1[i]-h2[j]), abs(h1[i]-h2[j+1]))
            ans = max(ans, radius)
            i += 1
            
        return ans
    
# The idea is for each house, we determine the smallest possible radius for the heaters to cover it. Then the final radius of
# design shall be the maximal radii for all the houses.

class Solution:
    def findRadius(self, houses, heaters):
        """
        :type houses: List[int]
        :type heaters: List[int]
        :rtype: int
        """
        def closest_heater(house, A=heaters, i=0, j=len(heaters)-1):
            if house <= A[0]:
                return A[0]
            if house >= A[-1]:
                return A[-1]
            while i <= j:
                mid = (i + j) // 2
                if house < A[mid]:
                    j = mid - 1
                elif house > A[mid]:
                    i = mid + 1
                else:
                    return A[mid]
            return A[i] if A[i] - house < house - A[j] else A[j] # now j + 1 == i
        
        heaters.sort()
        return max(abs(house-closest_heater(house)) for house in houses)
        
476. Number Complement

class Solution:
    def findComplement(self, num):
        """
        :type num: int
        :rtype: int
        """
        binary_list = self.to_binary(num)
        aux_list = [1-item for item in binary_list]
        s = 0
        for i in range(len(aux_list)):
            s += aux_list[i]*2**(len(aux_list) - 1 - i)
            
        return s
     
    def to_binary(self, num):
        res = []
        while num > 0:
            res.append(num % 2)
            num //= 2
        return res[::-1]
        
class Solution:
    def findComplement(self, num):
        """
        :type num: int
        :rtype: int
        """
        binary_list = self.to_binary(num)
        aux_list = [1-item for item in binary_list]
        s = 0
        for i in range(len(aux_list)):
            s += aux_list[i]*2**(len(aux_list)-1-i)
            
        return s
      
    def to_binary(self, num):
        res = []
        while num > 0:
            res.append(num % 2)
            num //= 2
        return res[::-1]
        
477. Total Hamming Distance

class Solution:
    def totalHammingDistance(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        f = [[0]*30 for i in range(len(nums))] # log(10**9, 2) = 29.9
        for i in range(len(nums)):
            num = nums[i]
            aux_list =[]
            while num > 0:
                aux_list.append(num%2)
                num //= 2
            for j in range(len(aux_list)):
                f[i][j] = aux_list[j]
        res = 0
        for j in range(30):
            aux_col = [f[i][j] for i in range(len(nums))]
            if 0 < aux_col.count(1) < len(nums):
                res += aux_col.count(1) * (len(nums) - aux_col.count(1))
        return res
        
class Solution:
    def totalHammingDistance(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        bits = [[0,0] for _ in range(30)]
        for x in nums:
            for i in range(30):
                bits[i][x%2] += 1
                x //= 2
        return sum( x*y for x, y in bits )        
        
