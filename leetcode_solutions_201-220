202. Happy Number

class Solution:
    def isHappy(self, n):
        """
        :type n: int
        :rtype: bool
        """
        if n == 1:
            return True
        lst = self.to_list(n)
        ss = self.square_sum(lst)
        hold = []
        check = False
        while ss != 1 and not check:
            hold.append(ss)
            lst = self.to_list(ss)
            ss = self.square_sum(lst)
            if ss == 1:
                return True
            elif ss in hold:
                check = True
        return not check

    def to_list(self, n):
        res = []
        while n > 0:
            res.append(n%10)
            n //= 10
        return res
    
    def square_sum(self, a_list):
        
        res = 0
        for i in range(len(a_list)):
            res += (a_list[i])**2
        return res
        
 203. Remove Linked List Elements
 
 # Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution(object):
    def removeElements(self, head, val):
        """
        :type head: ListNode
        :type val: int
        :rtype: ListNode
        """
        while head is not None and head.val == val:
            head = head.next
        if head == None:
            return head
        
        p = head
        
        while p and p.next:
            if p.next.val == val:
                temp = p.next.next
                p.next = temp
            else:
                p = p.next
        return head
        
 class Solution(object):
    def removeElements(self, head, val):
        """
        :type head: ListNode
        :type val: int
        :rtype: ListNode
        """
        lnhead = ln = ListNode("YAOJINGHUA")
        while head:
            if head.val != val:
                ln.next = head
                ln = ln.next
            head = head.next
        ln.next = None
        return lnhead.next
        
 class Solution(object):
    def removeElements(self, head, val):
        """
        :type head: ListNode
        :type val: int
        :rtype: ListNode
        """
        # Easy way to trim all the target values
        while head and head.val == val:
            head = head.next
        current = head
        # After trimming the beginning of the list, we need to deal with
        # elements throughout the rest of the list
        while current:
            # Simple remove operation, but the `while` loop is the key part
            while current.next and current.next.val == val:
                current.next = current.next.next
            current = current.next
        return head
        
        
 204. Count Primes
 
 class Solution(object):
    def countPrimes(self, n):
        """
        :type n: int
        :rtype: int
        """
        c = 0
        check = [0]*n
        i=2
        while i < n:
                if check[i]==0:
                    c+=1
                    for j in range(i,n,i):
                        check[j]=1
                i+=1
        return c
        
  205. Isomorphic Strings
  
  class Solution(object):
    def isIsomorphic(self, s, t):
        """
        :type s: str
        :type t: str
        :rtype: bool
        """
        
        s_p = {}
        t_p = {}
        
        for i in range(len(s)):
            if s[i] not in s_p:
                s_p[s[i]] = [i]
            else:
                s_p[s[i]].append(i)
                
        for i in range(len(t)):
            if t[i] not in t_p:
                t_p[t[i]] = [i]
            else:
                t_p[t[i]].append(i)
                
        s_s = {tuple(v):k for k, v in s_p.items()}
        t_t = {tuple(v):k for k, v in t_p.items()}
        return set(s_s) == set(t_t)
        
 class Solution(object):
    def isIsomorphic(self, s, t):
        """
        :type s: str
        :type t: str
        :rtype: bool
        """
        
        s_p = {}
        t_p = {}
        
        for i in range(len(s)):
            if s[i] not in s_p:
                s_p[s[i]] = [i]
            else:
                s_p[s[i]].append(i)
                
        for i in range(len(t)):
            if t[i] not in t_p:
                t_p[t[i]] = [i]
            else:
                t_p[t[i]].append(i)
                
        s_s = {str(v):k for k, v in s_p.items()}
        t_t = {str(v):k for k, v in t_p.items()}
        return set(s_s) == set(t_t)
        
 206. Reverse Linked List
 
 # Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution(object):
    def reverseList(self, head):
        """
        :type head: ListNode
        :rtype: ListNode
        """
        
        if head == None: # the case that linked list has length < 1
            return None
        
        else: # linked list has lenth no less than 1
            linked_nodes = []
            current = head
            while current != None:
                linked_nodes.append(current)
                current = current.next
            linked_nodes = linked_nodes[::-1]
            length = len(linked_nodes)
            
            for node_index, node in enumerate(linked_nodes):
                if node_index != length - 1:
                    node.next = linked_nodes[node_index + 1]
                else:
                    node.next = None
            return linked_nodes[0]
            
 207. Course Schedule
 
 class Solution:
    def canFinish(self, numCourses, prerequisites):
        """
        :type numCourses: int
        :type prerequisites: List[List[int]]
        :rtype: bool
        """
        v, e = numCourses, prerequisites
        graph = [[] for _ in range(v)]
        visit = [0]*v
        for x, y in e:
            graph[x].append(y)
        
        for i in range(v):
            if not self.dfs(i, visit, graph):
                return False
        return True
                     
            
    def dfs(self, i, visit, graph):
        if visit[i] == -1:
            return False
        if visit[i] == 1:
            return True
        visit[i] = -1
        for j in graph[i]:
            if not self.dfs(j, visit, graph):
                return False
        visit[i] = 1
        return True
        
class Solution:
    def canFinish(self, numCourses, prerequisites):
        """
        :type numCourses: int
        :type prerequisites: List[List[int]]
        :rtype: bool
        """
        v, e = numCourses, prerequisites
        graph = collections.defaultdict(list)
        visit = [0]*v
        for x, y in e:
            graph[x].append(y)
        
        for i in range(v):
            if not self.dfs(i, visit, graph):
                return False
        return True
                     
            
    def dfs(self, i, visit, graph):
        if visit[i] == -1:
            return False
        if visit[i] == 1:
            return True
        visit[i] = -1
        for j in graph[i]:
            if not self.dfs(j, visit, graph):
                return False
        visit[i] = 1
        return True
        
 208. Implement Trie (Prefix Tree)
 
 class Trie:

    def __init__(self):
        self.__root = {}

    def insert(self, word):
        current = self.__root
        for x in word:
            if x not in current:
                current[x] = {}
            current = current[x]
        # Using True instead of {}, the time cut down 40 ms
        current['end'] = True
                
    def search(self, word):
        current = self.__root
        for x in word:
            if x not in current:
                return False
            current = current[x]
        return 'end' in current

    def startsWith(self, prefix):
        current = self.__root
        for x in prefix:
            if x not in current:
                return False
            current = current[x]
        return True
        
class TrieNode:
# Initialize your data structure here.
    def __init__(self):
        self.children = collections.defaultdict(TrieNode)
        self.is_word = False

class Trie:

    def __init__(self):
        self.root = TrieNode()

    def insert(self, word):
        current = self.root
        for letter in word:
            current = current.children[letter]
        current.is_word = True

    def search(self, word):
        current = self.root
        for letter in word:
            current = current.children.get(letter)
            if current is None:
                return False
        return current.is_word

    def startsWith(self, prefix):
        current = self.root
        for letter in prefix:
            current = current.children.get(letter)
            if current is None:
                return False
        return True
        
209. Minimum Size Subarray Sum

class Solution:
    def minSubArrayLen(self, s, nums):
        """
        :type s: int
        :type nums: List[int]
        :rtype: int
        """
        i = j = curSum = 0
        mini = math.inf
        
        while j < len(nums):
            if curSum + nums[j] < s:
                curSum += nums[j]
                j += 1
            else:
                mini = min(j - i + 1, mini)
                curSum -= nums[i]
                i += 1
        if mini != math.inf:
            return mini
        else:
            return 0
            
class Solution:
    def minSubArrayLen(self, s, nums):
        """
        :type s: int
        :type nums: List[int]
        :rtype: int
        """
        ans = math.inf
        left = a = 0
        
        for i in range(len(nums)):
            a += nums[i]
            while a >= s:
                ans = min(i-left+1, ans)
                a -= nums[left]
                left += 1
        if ans != math.inf:
            return ans
        else:
            return 0            

211. Add and Search Word - Data structure design

class WordDictionary:

    def __init__(self):
        """
        Initialize your data structure here.
        """
        self.data = dict()
        
        

    def addWord(self, word):
        """
        Adds a word into the data structure.
        :type word: str
        :rtype: void
        """
        ls = len(word)
        if ls not in self.data:
            self.data[ls] = [word]
        else:
            self.data[ls].append(word)
            
        

    def search(self, word):
        """
        Returns if the word is in the data structure. A word could contain the dot character '.' to represent any one letter.
        :type word: str
        :rtype: bool
        """
        
        def check(w1, w2):
            if len(w1) != len(w2):
                return False
            else:
                found = False
                i = 0
                while i < len(w1) and not found:
                    if w1[i] == '.' or w2[i] == '.':
                        i += 1
                    else:
                        if w1[i] == w2[i]:
                            i += 1
                        else:
                            found = True
                return not found
        
        if len(word) not in self.data.keys():
            return False
        else:
            items = self.data[len(word)]
            aux_list = [check(w, word) for w in items]
            return any(aux_list)
        


# Your WordDictionary object will be instantiated and called as such:
# obj = WordDictionary()
# obj.addWord(word)
# param_2 = obj.search(word)

class WordDictionary:

    def __init__(self):
        """
        Initialize your data structure here.
        """
        self.data = dict()
        
        

    def addWord(self, word):
        """
        Adds a word into the data structure.
        :type word: str
        :rtype: void
        """
        ls = len(word)
        if ls not in self.data:
            self.data[ls] = [word]
        else:
            self.data[ls].append(word)
            
        

    def search(self, word):
        """
        Returns if the word is in the data structure. A word could contain the dot character '.' to represent any one letter.
        :type word: str
        :rtype: bool
        """
        
        def check(w1, w2):
            if len(w1) != len(w2):
                return False
            else:
                found = False
                i = 0
                while i < len(w1) and not found:
                    if w1[i] == '.' or w2[i] == '.':
                        i += 1
                    else:
                        if w1[i] == w2[i]:
                            i += 1
                        else:
                            found = True
                return not found
        
        if len(word) not in self.data.keys():
            return False
        else:
            items = self.data[len(word)]
            aux_list = [check(w, word) for w in items]
            return any(aux_list)
        


# Your WordDictionary object will be instantiated and called as such:
# obj = WordDictionary()
# obj.addWord(word)
# param_2 = obj.search(word)

213. House Robber II

class Solution:
    def rob(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        if not nums: return 0
        if len(nums) < 3:
            return self.helper(nums)
        return max(self.helper(nums[1:]), nums[0] + self.helper(nums[2:-1]))
        
    def helper(self, nums):
        if not nums:
            return 0
        ls = len(nums)
        if ls == 1:
            return nums[0]
        if ls > 1:
            dp = [0]*(ls+1)
            dp[1] = nums[0]
            for i in range(2, ls+1):
                dp[i] = max(nums[i-1]+dp[i-2], dp[i-1])

        return dp[-1]
        
class Solution:
    def rob(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        
        if not nums:
            return 0
        if len(nums) < 3:
            return max(nums)
        
        nums_1 = nums[1:]
        nums_2 = nums[:-1]
        
        def dp(nums):
            dp = [0 for _ in range(len(nums))]
            dp[0] = nums[0]
            dp[1] = max(nums[:2])
            for i in range(2, len(nums)):
                dp[i] = max(dp[i-1], nums[i] + dp[i-2])
            return dp[-1]
        
        return max(dp(nums_1), dp(nums_2))
        
 214. Shortest Palindrome
 
 class Solution(object):
    def shortestPalindrome(self, s):
        """
        :type s: str
        :rtype: str
        """
        if not s:
            return s
        for i in range(len(s), -1, -1):
            pre, post = s[:i], s[i:]
            if pre == pre[::-1]:
                return post[::-1] + pre + post
                
 class Solution(object):
    def shortestPalindrome(self, s):
        """
        :type s: str
        :rtype: str
        """
       
        r = s[::-1]
        s_new = s + "#" + r;
        if r == s:
            return s
        kmp = [0] * len(s_new)
        for i in range(1,len(s_new)):
            t = kmp[i-1]
            while(t>0 and s_new[i] != s_new[t]):
                t = kmp[t-1]
            if(s_new[i] == s_new[t]):
                t = t+1
            kmp[i] = t
        
        pre = r[:len(r) - kmp[-1]]
        return pre + s
        
 215. Kth Largest Element in an Array
 
 class Solution:
    def findKthLargest(self, nums, k):
        """
        :type nums: List[int]
        :type k: int
        :rtype: int
        """
        return sorted(nums)[-k]
        
 class Solution:
    def findKthLargest(self, nums, k):
        """
        :type nums: List[int]
        :type k: int
        :rtype: int
        """
        res = [-float('inf')]*k
        for num in nums:
            if num > res[-1]:
                res.pop()
                res.append(num)
                res.sort(reverse=True)
        return res[-1]
        
 class Solution:
    def findKthLargest(self, nums, k):
        """
        :type nums: List[int]
        :type k: int
        :rtype: int
        """
        res = [-float('inf')]*k
        for num in nums:
            if num > res[-1]:
                res.pop()
                res.append(num)
                res.sort(reverse=True)
        return res[-1]
        
217. Contains Duplicate

class Solution:
    def containsDuplicate(self, nums):
        """
        :type nums: List[int]
        :rtype: bool
        """
        a_set = set(nums)
        return not (len(a_set) == len(nums))
        
class Solution:
    def containsDuplicate(self, nums):
        """
        :type nums: List[int]
        :rtype: bool
        """
        if len(nums) < 2:
            return False
        check = set()
        found = False
        for i in range(len(nums)):
            if nums[i] in check:
                found = True
            else:
                check.add(nums[i])
        return found
        
219. Contains Duplicate II

class Solution:
    def containsNearbyDuplicate(self, nums, k):
        # check k interval
        check = set()
        for i in range(len(nums)):
            if i > k:
                check.remove(nums[i - k - 1])
            if nums[i] in check:
                return True
            else:
                check.add(nums[i])
        return False
        
 220. Contains Duplicate III
 
 class Solution:
    def containsNearbyAlmostDuplicate(self, nums, k, t):
        """
        :type nums: List[int]
        :type k: int
        :type t: int
        :rtype: bool
        """
        ind = sorted(range(len(nums)), key=lambda x: nums[x])
        for i in range(len(nums)-1):
            j = i + 1
            while j < len(nums) and nums[ind[j]] - nums[ind[i]] <= t:
                if abs(ind[i] - ind[j]) <= k:
                    return True
                j += 1
        return False
        
  class Solution:
    def containsNearbyAlmostDuplicate(self, nums, k, t):
        """
        :type nums: List[int]
        :type k: int
        :type t: int
        :rtype: bool
        """
        ls = len(nums)
        
        if t==0 and len(nums)== len(set(nums)): 
            return False
        
        if k < 1 or t < 0:
            return False
        
        if k >= ls-1:
            small = self.smallest_gap(nums)
            return small <= t
        

        found = False
        i = 0
        while i < ls - k and not found:
            small = self.smallest_gap(nums[i:i+k+1])
            if small <= t:
                found = True
            else:
                i += 1
        return found

    def smallest_gap(self, nums):
        ls = len(nums)
        aux_nums = sorted(nums)
        small = float("Inf")
        i = 1
        while i < ls:
            temp = aux_nums[i] - aux_nums[i-1]
            if temp < small:
                small = temp
            i += 1
        return small      
       
