883. Projection Area of 3D Shapes

class Solution:
    def projectionArea(self, grid):
        """
        :type grid: List[List[int]]
        :rtype: int
        """
        m, n = len(grid), len(grid[0])
        
        xy = 0
        for i in range(m):
            for j in range(n):
                if grid[i][j]!=0:
                    xy += 1
        xz = sum([max(row) for row in grid])
        
        yz = sum([max([grid[i][j] for i in range(m)]) for j in range(n)])
        
        return xy + xz + yz
        
class Solution:
    def projectionArea(self, grid):
        """
        :type grid: List[List[int]]
        :rtype: int
        """
        xy = sum(v>0 for row in grid for v in row)
        xz = sum(max(row) for row in grid)
        yz = sum(max(col) for col in zip(*grid))
        
        return xy + xz + yz
        
class Solution:
    def projectionArea(self, grid):
        """
        :type grid: List[List[int]]
        :rtype: int
        """
        m, n = len(grid), len(grid[0])
        
        xy = 0
        for i in range(m):
            for j in range(n):
                if grid[i][j]!=0:
                    xy += 1
        xz = sum([max(row) for row in grid])
        
        yz = sum([max([grid[i][j] for i in range(m)]) for j in range(n)])
        
        return xy + xz + yz
        
884. Uncommon Words from Two Sentences

class Solution:
    def uncommonFromSentences(self, A, B):
        """
        :type A: str
        :type B: str
        :rtype: List[str]
        """
        
        A_list = A.split()
        B_list = B.split()
        
        A_set = set(A_list)
        B_set = set(B_list)
        
        union = A_set.union(B_set)
        inter = A_set.intersection(B_set)
        
        candidates = union.difference(inter)
        
        res = []
        for item in candidates:
            if A_list.count(item) > 1 or B_list.count(item) > 1:
                continue
            else:
                res.append(item)
        return res
        
class Solution:
    def uncommonFromSentences(self, A, B):
        """
        :type A: str
        :type B: str
        :rtype: List[str]
        """
        
        A_list = A.split()
        B_list = B.split()
        
        A_set = set(A_list)
        B_set = set(B_list)
        
        union = A_set.union(B_set)
        inter = A_set.intersection(B_set)
        
        candidates = union.difference(inter)
        
        res = []
        for item in candidates:
            if A_list.count(item) > 1 or B_list.count(item) > 1:
                continue
            else:
                res.append(item)
        return res
        
 886. Possible Bipartition
 
 class Solution:
    def possibleBipartition(self, N, dislikes):
        """
        :type N: int
        :type dislikes: List[List[int]]
        :rtype: bool
        """
        if not dislikes:
            return True
        graph = {}
        for x in dislikes:
            if x[0] in graph:
                graph[x[0]].append(x[1])
            else:
                graph[x[0]] = [x[1]]
            if x[1] in graph:
                graph[x[1]].append(x[0])
            else:
                graph[x[1]] = [x[0]]
            
        
        color = {}
        for i in range(1, N+1):
            if i not in color:
                color[i] = 0
                stack = [(i, 0)]
                while stack:
                    vertex, paint = stack.pop()
                    if vertex in graph:
                        for adj in graph[vertex]:
                            if adj in color:
                                if color[adj] != (paint + 1) % 2:
                                    return False
                            else:
                                stack.append((adj, (paint + 1) %2))
                                color[adj] = (paint + 1) % 2
        
        return True
        
887. Super Egg Drop

class Solution:
    def superEggDrop(self, K, N):
        dp = [[0] * (K + 1) for i in range(N + 1)]
        for m in range(1, N + 1):
            for k in range(1, K + 1):
                dp[m][k] = dp[m - 1][k - 1] + dp[m - 1][k] + 1
            if dp[m][K] >= N: return m
            
class Solution:
    def superEggDrop(self, K, N):
        dp = [0, 0]
        m = 0
        while dp[-1] < N:
            for i in range(len(dp) - 1, 0, - 1):
                dp[i] += dp[i - 1] + 1
            if len(dp) < K + 1:
                dp.append(dp[-1])
            m += 1
        return m
        
888. Fair Candy Swap

class Solution:
    def fairCandySwap(self, A, B):
        """
        :type A: List[int]
        :type B: List[int]
        :rtype: List[int]
        """
        
        a = sum(A)
        b = sum(B)
        d = (b-a)//2
        found = False
        set_a = set(A)
        set_b = set(B)
        for element in set_a:
            if element + d in set_b:
                return [element, element + d]
                
 class Solution:
    def fairCandySwap(self, A, B):
        """
        :type A: List[int]
        :type B: List[int]
        :rtype: List[int]
        """
        delta = (sum(B) - sum(A))//2
        aux_set = {a + delta for a in set(A)}
        b = list(aux_set.intersection(set(B)))[0]
        return [b-delta, b]
        
889. Construct Binary Tree from Preorder and Postorder Traversal

# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution:
    def constructFromPrePost(self, pre, post):
        """
        :type pre: List[int]
        :type post: List[int]
        :rtype: TreeNode
        """
        if not pre: return
        root = TreeNode(pre[0])
        pre, post = pre[1:], post[:-1]
        if not pre: return root
        i = post.index(pre[0])
        root.left = self.constructFromPrePost(pre[:i+1], post[:i+1])
        root.right = self.constructFromPrePost(pre[i+1:], post[i+1:])
        return root
        
890. Find and Replace Pattern

class Solution(object):
    def findAndReplacePattern(self, words, pattern):
        """
        :type words: List[str]
        :type pattern: str
        :rtype: List[str]
        """
        return [word for word in words if self.match(word, pattern)]
        
        
        
    def match(self, word, pattern):
        return self.pattern_hash(word) == self.pattern_hash(pattern)
        
        
        
    def pattern_hash(self, pattern):
        n = len(pattern)
        d = dict()
        for i in range(n):
            if pattern[i] not in d:
                d[pattern[i]] = i+1
            
        res = 0
        for i in range(n):
            res += d[pattern[i]]*10**(n-1-i)
        return res
        
class Solution(object):
    def findAndReplacePattern(self, words, pattern):
        """
        :type words: List[str]
        :type pattern: str
        :rtype: List[str]
        """
        return [word for word in words if self.match(word, pattern)]
        
        
        
    def match(self, word, pattern):
        return self.pattern_hash(word) == self.pattern_hash(pattern)
        
        
        
    def pattern_hash(self, pattern):
        
        d = dict()
        for i, v in enumerate(pattern):
            if v not in d:
                d[v] = [i]
            else:
                d[v].append(i)
        return sorted(d.values())
        
class Solution(object):
    def findAndReplacePattern(self, words, pattern):
        """
        :type words: List[str]
        :type pattern: str
        :rtype: List[str]
        """
        return [word for word in words if self.match(word, pattern)]
        
        
        
    def match(self, word, pattern):
        return self.pattern_hash(word) == self.pattern_hash(pattern)
        
        
        
    def pattern_hash(self, pattern):
        n = len(pattern)
        d = dict()
        res = 0
        for i in range(n):
            if pattern[i] not in d:
                d[pattern[i]] = i+1
            res += d[pattern[i]]*10**(n-1-i)
        return res
        
class Solution(object):
    def findAndReplacePattern(self, words, pattern):
        """
        :type words: List[str]
        :type pattern: str
        :rtype: List[str]
        """
        return [word for word in words if self.match(word, pattern)]
        
        
        
    def match(self, word, pattern):
        return self.pattern_hash(word) == self.pattern_hash(pattern)
        
        
        
    def pattern_hash(self, pattern):
        n = len(pattern)
        d = dict()
        for i in range(n):
            if pattern[i] not in d:
                d[pattern[i]] = i+1
            
        res = 0
        for i in range(n):
            res += d[pattern[i]]*10**(n-1-i)
        return res

class Solution(object):
    def findAndReplacePattern(self, words, pattern):
        """
        :type words: List[str]
        :type pattern: str
        :rtype: List[str]
        """
        return [word for word in words if self.match(word, pattern)]
        
        
        
    def match(self, word, pattern):
        return self.pattern_hash(word) == self.pattern_hash(pattern)
        
        
        
    def pattern_hash(self, pattern):
        n = len(pattern)
        d = dict()
        for i in range(n):
            if pattern[i] not in d:
                d[pattern[i]] = i+1
            
        res = 0
        for i in range(n):
            res += d[pattern[i]]*10**(n-1-i)
        return res
        
893. Groups of Special-Equivalent Strings

class Solution:
    def numSpecialEquivGroups(self, A):
        """
        :type A: List[str]
        :rtype: int
        """
        aux_set = set()
        for string in A:
            tmp = self.to_hashmap(string)
            aux_set.add(tmp)
        return len(aux_set)
   
    def to_hashmap(self, string):
        even_list = []
        odd_list = []
        for i, v in enumerate(string):
            if i % 2 == 0:
                even_list.append(v)
            else:
                odd_list.append(v)
        even_list = sorted(even_list)
        odd_list = sorted(odd_list)
        tmp = even_list + odd_list
        return "".join(tmp)
        
class Solution:
    def numSpecialEquivGroups(self, A):
        """
        :type A: List[str]
        :rtype: int
        """
        aux_set = set()
        for string in A:
            even = "".join(sorted(string[0::2]))
            odd = "".join(sorted(string[1::2]))
            pattern = even + odd
            aux_set.add(pattern)
        return len(aux_set)
        
class Solution:
    def numSpecialEquivGroups(self, A):
        """
        :type A: List[str]
        :rtype: int
        """
        aux_set = set()
        for string in A:
            tmp = self.to_hashmap(string)
            aux_set.add(tmp)
        return len(aux_set)
             
    def to_hashmap(self, string):
        even_list = []
        odd_list = []
        for i, v in enumerate(string):
            if i % 2 == 0:
                even_list.append(v)
            else:
                odd_list.append(v)
        even_list = sorted(even_list)
        odd_list = sorted(odd_list)
        tmp = even_list + odd_list
        return "".join(tmp)
        
895. Maximum Frequency Stack

class FreqStack:

    def __init__(self):
        import collections
        import heapq
        self.id = 0
        self.count = collections.Counter()
        self.stack = []
        

    def push(self, x):
        """
        :type x: int
        :rtype: void
        """
        time = self.count[x]
        heapq.heappush(self.stack, (-time-1, -self.id, x))
        self.count[x] += 1
        self.id += 1
        

    def pop(self):
        """
        :rtype: int
        """
        ntime, nindex, item = heapq.heappop(self.stack)
        self.count[item] -= 1
        return item
        


# Your FreqStack object will be instantiated and called as such:
# obj = FreqStack()
# obj.push(x)
# param_2 = obj.pop()

class FreqStack:

    def __init__(self):
        self.heap = []
        self.m = collections.defaultdict(int)
        self.counter = 0

    def push(self, x):
        """
        :type x: int
        :rtype: void
        """
        self.m[x] += 1
        heapq.heappush(self.heap, (-self.m[x], -self.counter, x))
        self.counter += 1
        
        

    def pop(self):
        """
        :rtype: int
        """
        t = heapq.heappop(self.heap)
        self.m[t[2]] -= 1
        return t[2]


# Your FreqStack object will be instantiated and called as such:
# obj = FreqStack()
# obj.push(x)
# param_2 = obj.pop()

896. Monotonic Array

class Solution:
    def isMonotonic(self, A):
        """
        :type A: List[int]
        :rtype: bool
        """
        return A == sorted(A) or A == sorted(A, reverse=True)
        
class Solution:
    def isMonotonic(self, A):
        """
        :type A: List[int]
        :rtype: bool
        """
        return self.check_inc(A) or self.check_dec(A)
            
    
    def check_inc(self, A):
        ls = len(A)
        if ls <= 2:
            return True
        mark = True
        i = 0
        while i < len(A) - 1 and mark:
            if A[i] <= A[i+1]:
                i += 1
            else:
                mark = False
        return mark
    
    def check_dec(self, A):
        ls = len(A)
        if ls <= 2:
            return True
        mark = True
        i = 0
        while i < len(A) - 1 and mark:
            if A[i] >= A[i+1]:
                i += 1
            else:
                mark = False
        return mark
        
897. Increasing Order Search Tree

# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution:
    def increasingBST(self, root, tail = None):
        if not root: return tail
        res = self.increasingBST(root.left, root)
        root.left = None
        root.right = self.increasingBST(root.right, tail)
        return res
        
class Solution:
    def increasingBST(self, root):
        """
        :type root: TreeNode
        :rtype: TreeNode
        """
        aux_list = self.in_order_traversal(root)
        if aux_list == []:
            return
        else:
            tree_node_list = [TreeNode(aux_list[i]) for i in range(len(aux_list))]
            dummyNode = TreeNode(None)
            current = dummyNode
            for i in range(len(tree_node_list)):
                current.left = None
                current.right = tree_node_list[i]
                current = current.right
            current.left = None
            current.right = None
            return dummyNode.right
        
        
    def in_order_traversal(self, root):
        if not root:
            return []
        return self.in_order_traversal(root.left) + [root.val] + self.in_order_traversal(root.right)
        
class Solution:
    def increasingBST(self, root, end = None):
        if not root:
            return end
        left_part = self.increasingBST(root.left, root)
        root.left = None
        root.right = self.increasingBST(root.right, end)
        return left_part
        
        
        


