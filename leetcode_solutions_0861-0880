867. Transpose Matrix

import numpy as np
class Solution:
    def transpose(self, A):
        """
        :type A: List[List[int]]
        :rtype: List[List[int]]
        """
        if A == []:
            return A
        
        m = len(A)
        n = len(A[0])
        res = []
        for i in range(n):
            temp = [A[j][i] for j in range(m)]
            res.append(temp)
        return res
        
868. Binary Gap

class Solution:
    def binaryGap(self, N):
        """
        :type N: int
        :rtype: int
        """
        to_binary = []
        while N > 0:
            to_binary.append(N % 2)
            N //= 2
        if to_binary.count(1) < 2:
            return 0
        
        indices = []
        for i, v in enumerate(to_binary):
            if v == 1:
                indices.append(i)
        
        aux_res = []
        for i in range(len(indices)-1):
            aux_res.append(indices[i+1] - indices[i])
        return max(aux_res)
        
class Solution:
    def binaryGap(self, N):
        """
        :type N: int
        :rtype: int
        """
        to_binary = []
        while N > 0:
            to_binary.append(N % 2)
            N //= 2
        if to_binary.count(1) < 2:
            return 0
        
        indices = []
        for i, v in enumerate(to_binary):
            if v == 1:
                indices.append(i)
        
        current = indices[1] - indices[0]
        for i in range(1, len(indices)-1):
            temp = indices[i+1] - indices[i]
            if temp > current:
                current = temp
        return current
        
 # Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution:
    def leafSimilar(self, root1, root2):
        """
        :type root1: TreeNode
        :type root2: TreeNode
        :rtype: bool
        """
        
        
        f = self.inorder(root1)
        s = self.inorder(root2)
        f_leaves = [node.val for node in f if self.is_leaf(node)]
        s_leaves = [node.val for node in s if self.is_leaf(node)]
        return f_leaves == s_leaves
     
    def inorder(self, root):
        if not root:
            return []
        return self.inorder(root.left) + [root] + self.inorder(root.right)
    
    def is_leaf(self, node):
        if not node.left and not node.right:
            return True
        else:
            return False
            
class Solution:
    def leafSimilar(self, root1, root2):
        """
        :type root1: TreeNode
        :type root2: TreeNode
        :rtype: bool
        """
        
        
        f = self.leaf_vals(root1)
        s = self.leaf_vals(root2)
        
        return f == s
     
    def leaf_vals(self, root):
        if not root:
            return []
        if not root.left and not root.right:
            return [root.val]
        return self.leaf_vals(root.left) + self.leaf_vals(root.right)    
        
class Solution:
    def leafSimilar(self, root1, root2):
        """
        :type root1: TreeNode
        :type root2: TreeNode
        :rtype: bool
        """
        f = self.left_right(root1, [])
        s = self.left_right(root2, [])
        return f == s
        
    
    def left_right(self, root, s):
        if root:
            stack = [root]
            while stack:
                x = stack.pop()
                if (not x.left) and (not x.right):
                    s.append(x.val)
                if x.right:
                    stack.append(x.right)
                if x.left:
                    stack.append(x.left)
            return s
            
 874. Walking Robot Simulation
 
 class Solution:
    def robotSim(self, commands, obstacles):
        """
        :type commands: List[int]
        :type obstacles: List[List[int]]
        :rtype: int
        """
        dic = {(x, y) for x, y in obstacles}
        x, y = 0, 0
        di = 0
        direction = [[0, 1], [-1, 0], [0, -1], [1, 0]]
        dx, dy = direction[di]
        res = 0
        commands = commands[::-1]
        while commands:
            c = commands.pop()
            if c in [-2, -1]:
                di += [1, -1][c+2]
                di %= 4
                dx, dy = direction[di]
                continue
            end_x = x + c*dx
            end_y = y + c*dy
            
            while x != end_x or y != end_y:
                next_x = x + dx
                next_y = y + dy
                if (next_x, next_y) in dic:
                    break
                x, y = next_x, next_y
            res = max(res, x**2 + y**2)
        return res
        
class Solution:
    def robotSim(self, commands, obstacles):
        """
        :type commands: List[int]
        :type obstacles: List[List[int]]
        :rtype: int
        """
        dic = {(x, y) for x, y in obstacles}
        x, y = 0, 0
        di = 0
        direction = [[0, 1], [-1, 0], [0, -1], [1, 0]]
        dx, dy = direction[di]
        res = 0
        commands = commands[::-1]
        while commands:
            c = commands.pop()
            if c in [-2, -1]:
                di += [1, -1][c+2]
                di %= 4
                dx, dy = direction[di]
                continue
            end_x = x + c*dx
            end_y = y + c*dy
            
            while x != end_x or y != end_y:
                next_x = x + dx
                next_y = y + dy
                if (next_x, next_y) in dic:
                    break
                x, y = next_x, next_y
            res = max(res, x**2 + y**2)
        return res
        
class Solution:
    def robotSim(self, commands, obstacles):
        """
        :type commands: List[int]
        :type obstacles: List[List[int]]
        :rtype: int
        """
        obstacles = {(x, y) for (x, y) in obstacles}
        L90 = [[0, -1], [1, 0]]
        R90 = [[0, 1], [-1, 0]]
        rot = {-2:L90, -1:R90}
        p = [0, 0]
        d = [0, 1]
        ans = 0
        for cmd in commands:
            if cmd < 0:
                d = self.f(rot[cmd], d)
                continue
            else:
                dx,dy = d
                for _ in range(cmd):
                    if (p[0] + dx, p[1] + dy) in obstacles:
                        break
                    else:
                        p[0] += dx
                        p[1] += dy
                ans = max(ans, p[0]**2 + p[1]**2)
        return ans
    
    def f(self, A, v):
        return [A[0][0]*v[0] + A[0][1]*v[1], A[1][0]*v[0]+A[1][1]*v[1]]
        
class Solution:
    def robotSim(self, commands, obstacles):
        """
        :type commands: List[int]
        :type obstacles: List[List[int]]
        :rtype: int
        """
        obstacles = {(x, y) for (x, y) in obstacles}
        L90 = [[0, -1], [1, 0]]
        R90 = [[0, 1], [-1, 0]]
        rot = {-2:L90, -1:R90}
        p = [0, 0]
        d = [0, 1]
        ans = 0
        
        def f(A, v):
            v[0], v[1] = A[0][0]*v[0] + A[0][1]*v[1], A[1][0]*v[0]+A[1][1]*v[1]
        
        
        for cmd in commands:
            if cmd < 0:
                f(rot[cmd], d)
                continue
            else:
                dx,dy = d
                for _ in range(cmd):
                    if (p[0] + dx, p[1] + dy) in obstacles:
                        break
                    else:
                        p[0] += dx
                        p[1] += dy
                ans = max(ans, p[0]**2 + p[1]**2)
        return ans
        
876. Middle of the Linked List

# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution:
    def middleNode(self, head):
        """
        :type head: ListNode
        :rtype: ListNode
        """
        
        ls = self.find_length(head)
        stop_point = ls//2 + 1
        
        current = head
        total = 1
        while total < stop_point:
            total += 1
            current = current.next
        return current
    
    def find_length(self, head):
        count = 0
        while head:
            count += 1
            head = head.next
        return count
        
class Solution:
    def middleNode(self, head):
        """
        :type head: ListNode
        :rtype: ListNode
        """
        tmp = head
        while tmp and tmp.next:
            head = head.next
            tmp = tmp.next.next
        return head        
