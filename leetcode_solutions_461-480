461. Hamming Distance

class Solution(object):
    def hammingDistance(self, x, y):
        """
        :type x: int
        :type y: int
        :rtype: int
        """
        lst_x = list()
        while x > 0:
            lst_x.append(x%2)
            x //= 2
        lst_y = list()
        while y > 0:
            lst_y.append(y%2)
            y //= 2
        
        if  len(lst_x) < len(lst_y):
            lst_x, lst_y = lst_y, lst_x
        diff = 0
        m = len(lst_x)
        n = len(lst_y)
        for i in range(n):
            if lst_x[i] != lst_y[i]:
                diff += 1
        for j in range(n, m):
            if lst_x[j] == 1:
                diff += 1
        return diff
        
462. Minimum Moves to Equal Array Elements II

class Solution(object):
    def minMoves2(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        nums = sorted(nums)
        mid_num = nums[len(nums)//2]
        
        return sum([abs(num - mid_num) for num in nums])
        
class Solution(object):
    def minMoves2(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        nums = sorted(nums)
        mid_num = nums[len(nums)//2]
        res = 0
        for num in nums:
            res += abs(num-mid_num)
        return res
        
 class Solution(object):
    def minMoves2(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        nums = sorted(nums)
        mid_num = nums[len(nums)//2]
        res = 0
        for num in nums:
            res += abs(num-mid_num)
        return res
        
 463. Island Perimeter
 
 class Solution:
    def islandPerimeter(self, grid):
        """
        :type grid: List[List[int]]
        :rtype: int
        """
        m = len(grid)
        n = len(grid[0])
        for item in grid:
            item.insert(0, 0)
            item.append(0)
        grid.insert(0, [0]*(n+2))
        grid.append([0]*(n+2))
        
        
        count = 0
        for i in range(1, m+2-1):
            for j in range(1, n+2-1):
                if grid[i][j] == 1:
                    
                    if grid[i-1][j] == 0:
                        count += 1
                    if grid[i+1][j] == 0:
                        count += 1
                    if grid[i][j+1] == 0:
                        count += 1
                    if grid[i][j-1] == 0:
                        count += 1
        return count
        
476. Number Complement

class Solution:
    def findComplement(self, num):
        """
        :type num: int
        :rtype: int
        """
        binary_list = self.to_binary(num)
        aux_list = [1-item for item in binary_list]
        s = 0
        for i in range(len(aux_list)):
            s += aux_list[i]*2**(len(aux_list) - 1 - i)
            
        return s
     
    def to_binary(self, num):
        res = []
        while num > 0:
            res.append(num % 2)
            num //= 2
        return res[::-1]
        
class Solution:
    def findComplement(self, num):
        """
        :type num: int
        :rtype: int
        """
        binary_list = self.to_binary(num)
        aux_list = [1-item for item in binary_list]
        s = 0
        for i in range(len(aux_list)):
            s += aux_list[i]*2**(len(aux_list)-1-i)
            
        return s
      
    def to_binary(self, num):
        res = []
        while num > 0:
            res.append(num % 2)
            num //= 2
        return res[::-1]
        
        
        
