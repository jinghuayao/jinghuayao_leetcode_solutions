141. Linked List Cycle

# Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution(object):
    def hasCycle(self, head):
        root = head
        while head:
            if head.next == root:
                return True     
            next = head.next
            head.next = root
            head = next    
        return False
        
        
 class Solution(object):
    def hasCycle(self, head):
        """
        :type head: ListNode
        :rtype: bool
        """
        J=set()
        current=head
        while current!=None:
            if current in J:
                return True
            else:
                J.add(current)
            current=current.next
        return False
        
  class Solution(object):
    def hasCycle(self, head):

        fast_ptr = head
        slow_ptr = head
        while (fast_ptr and slow_ptr and fast_ptr.next):
            slow_ptr = slow_ptr.next
            fast_ptr = fast_ptr.next.next
            if slow_ptr == fast_ptr:
                return True
            
        return False
        
  142. Linked List Cycle II
  
  # Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution(object):
    def detectCycle(self, head):
        """
        :type head: ListNode
        :rtype: ListNode
        """
        J = set()
        c = head
        while c:
            if c in J:
                return c
            else:
                J.add(c)
            c = c.next
        return
        
143. Reorder List

# Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution(object):
    def reorderList(self, head):
        """
        :type head: ListNode
        :rtype: void Do not return anything, modify head in-place instead.
        """
    
        # Two points
        if head is None or head.next is None:
            return
        p1, p2 = head, head.next
        while p2 and p2.next:
            p1 = p1.next
            p2 = p2.next.next
        head2 = p1.next
        p1.next = None
        p2 = head2.next
        head2.next = None
        # reverse mid->end to end->mid
        while p2:
            temp = p2.next
            p2.next = head2
            head2 = p2
            p2 = temp
        p1, p2 = head, head2
        # merge
        while p1:
            temp = p1.next
            p1.next = p2
            p1 = p1.next
            p2 = temp
            
144. Binary Tree Preorder Traversal

# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None


class Solution(object):
    def preorderTraversal(self, root):
        """
        :type root: TreeNode
        :rtype: List[int]
        """
        return list(self._pre_order_iter(root))
    
    def _pre_order_iter(self, root):
        deque = []
        while deque or root:
            if root:
                yield root.val
                if root.right:
                    deque.append(root.right)
                root = root.left
            else:
                root = deque.pop()
                
 145. Binary Tree Postorder Traversal
 
 # Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution:
    def postorderTraversal(self, root):
        """
        :type root: TreeNode
        :rtype: List[int]
        """
        current, s, res = root, [], []
        while current or s:
            if current:
                s.append(current)
                current = current.left
            else:
                temp = s[-1].right
                if not temp:
                    temp = s.pop()
                    res.append(temp.val)
                    while s and temp == s[-1].right:
                        temp = s.pop()
                        res.append(temp.val)
                else:
                    current = temp
        return res
        
  class Solution:
    def postorderTraversal(self, root):
        """
        :type root: TreeNode
        :rtype: List[int]
        """
        if not root:
            return []
        res = []
        stack = [root]
        while stack:
            x = stack.pop()
            res.insert(0, x.val)
            if x.left:
                stack.append(x.left)
            if x.right:
                stack.append(x.right)
        return res
        
147. Insertion Sort List

# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, x):
#         self.val = x
#         self.next = None

        
class Solution(object):
    def insertionSortList(self, head):
        """
        :type head: ListNode
        :rtype: ListNode
        """
        # https://discuss.leetcode.com/topic/8570/an-easy-and-clear-way-to-sort-o-1-space
        if head is None:
            return None
        helper = ListNode(-1000)
        pre, curr = helper, head
        while curr is not None:
            next_step = curr.next
            while pre.next and pre.next.val < curr.val:
                pre = pre.next
            curr.next = pre.next
            pre.next = curr
            pre = helper
            curr = next_step
        return helper.next
        
148. Sort List
  
  # Definition for singly-linked list.
# class ListNode:
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution:
    def sortList(self, head):
        """
        :type head: ListNode
        :rtype: ListNode
        """
        if not head or not head.next:
            return head
        list1, list2 = self.breakHelper(head)
        return self.merge(self.sortList(list1), self.sortList(list2))
        
        
    def breakHelper(self, head):
        if not head or not head.next:
            return None, None
        prev, slow, fast = head, head, head
        while fast and fast.next:
            prev = slow
            slow = slow.next
            fast = fast.next.next
        prev.next = None
        return head, slow
    
    def merge(self, head1, head2):
        dummy = ListNode(-1)
        cur = dummy
        while head1 and head2:
            if head1.val < head2.val:
                cur.next = head1
                head1 = head1.next
            else:
                cur.next = head2
                head2 = head2.next
            cur = cur.next
        if head1:
            cur.next = head1
        if head2:
            cur.next = head2
        return dummy.next
        
  class Solution:
    def sortList(self, head):
        """
        :type head: ListNode
        :rtype: ListNode
        """
        if not head or not head.next:
            return head
        list1, list2 = self.breakHelper(head)
        return self.merge(self.sortList(list1), self.sortList(list2))
        
        
    def breakHelper(self, head):
        if not head or not head.next:
            return None, None
        prev, slow, fast = head, head, head
        while fast and fast.next:
            prev = slow
            slow = slow.next
            fast = fast.next.next
        prev.next = None
        return head, slow
    
    def merge(self, head1, head2):
        dummy = ListNode("jinghuayao")
        cur = dummy
        while head1 and head2:
            if head1.val < head2.val:
                cur.next = head1
                head1 = head1.next
            else:
                cur.next = head2
                head2 = head2.next
            cur = cur.next
        if head1:
            cur.next = head1
        
        if head2:
            cur.next = head2
        return dummy.next
        
 150. Evaluate Reverse Polish Notation
 
 class Solution:
    def evalRPN(self, tokens):
        """
        :type tokens: List[str]
        :rtype: int
        """
        stack = []
        for token in tokens:
            if token not in "+-*/":
                stack.append(int(token))
            else:
                op2 = stack.pop()
                op1 = stack.pop()
                if token == '+':
                    stack.append(op1 + op2)
                elif token == '-':
                    stack.append(op1 - op2)
                elif token == '*':
                    stack.append(op1 * op2)
                else:
                    tmp = op1/op2
                    if tmp >= 0:
                        stack.append(op1//op2)
                    else:
                        tmp = abs(op1)//abs(op2)
                        stack.append(-tmp)
        return stack[0]
        
 class Solution:
    def evalRPN(self, tokens):
        """
        :type tokens: List[str]
        :rtype: int
        """
        stack = []
        for token in tokens:
            if token not in "+-*/":
                stack.append(int(token))
            else:
                op2 = stack.pop()
                op1 = stack.pop()
                if token == '+':
                    stack.append(op1 + op2)
                elif token == '-':
                    stack.append(op1 - op2)
                elif token == '*':
                    stack.append(op1 * op2)
                else:
                    tmp = op1/op2
                    if tmp >= 0:
                        stack.append(op1//op2)
                    else:
                        tmp = abs(op1)//abs(op2)
                        stack.append(-tmp)
        return stack[0]
        
151. Reverse Words in a String

class Solution(object):
    def reverseWords(self, s):
        """
        :type s: str
        :rtype: str
        """
        to_list = s.split()
        aux_list = to_list[::-1]
        
        string = ""
        for item in aux_list:
            string += (" " + item)
        
        return string.lstrip()
        
152. Maximum Product Subarray

class Solution:
    def maxProduct(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        maximum = big = small = nums[0]
        for n in nums[1:]:
            big, small = max(n, n*big, n*small), min(n, n*big, n*small)
            maximum = max(maximum, big)
        return maximum
        
class Solution(object):
    def maxProduct(self, A):
        """
        :type nums: List[int]
        :rtype: int
        """
    
        B = A[::-1]
        for i in range(1, len(A)):
            A[i] *= A[i - 1] or 1
            B[i] *= B[i - 1] or 1
        return max(A + B)
        
153. Find Minimum in Rotated Sorted Array

class Solution:
    def findMin(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        return min(nums)
        
        
        
