421. Maximum XOR of Two Numbers in an Array

class TrieNode():
    def __init__(self):
        self.one = None
        self.zero = None

class Solution:
    def findMaximumXOR(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        root = TrieNode()
        for num in nums:
            node = root
            for j in range (31, -1, -1):
                tmp = num & 1 << j
                if tmp:
                    if not node.one:
                        node.one = TrieNode()
                    node = node.one
                else:
                    if not node.zero:
                        node.zero = TrieNode()
                    node = node.zero
                    
        ans = 0
        for num in nums:
            node = root
            tmp_val = 0
            for j in range (31, -1, -1):
                tmp = num & 1 << j
                if node.one and node.zero:
                    if tmp:
                        node = node.zero
                    else:
                        node = node.one
                    tmp_val += 1 << j
                else:
                    if (node.zero and tmp) or (node.one and not tmp):
                        tmp_val += 1 << j
                    node = node.one or node.zero
            ans = max(ans, tmp_val)
                                                
        return ans


427. Construct Quad Tree

"""
# Definition for a QuadTree node.
class Node:
    def __init__(self, val, isLeaf, topLeft, topRight, bottomLeft, bottomRight):
        self.val = val
        self.isLeaf = isLeaf
        self.topLeft = topLeft
        self.topRight = topRight
        self.bottomLeft = bottomLeft
        self.bottomRight = bottomRight
"""
class Solution:
    def construct(self, grid):
        """
        :type grid: List[List[int]]
        :rtype: Node
        """
        if not grid:
            return
        else:
            n = len(grid)
            if self.check_leaf(grid):
                return Node(grid[0][0]==1, True, None, None, None, None)
            else:
                return Node("*", False, self.construct([row[:n//2] for row in grid[:n//2]]),
                           self.construct([row[n//2:] for row in grid[:n//2]]),
                           self.construct([row[:n//2] for row in grid[n//2:]]),
                           self.construct([row[n//2:] for row in grid[n//2:]]))
    
    def check_leaf(self, grid):
        aux_set = set()
        for i in range(len(grid)):
            for j in range(len(grid[0])):
                aux_set.add(grid[i][j])
                if len(aux_set) > 1:
                    return False
        return True
        
class Solution:
    def construct(self, grid):
        """
        :type grid: List[List[int]]
        :rtype: Node
        """
        if not grid:
            return
        else:
            n = len(grid)
            if self.check_leaf(grid):
                return Node(grid[0][0]==1, True, None, None, None, None)
            else:
                return Node("*", False, self.construct([grid[i][:n//2] for i in range(n//2)]),
                           self.construct([grid[i][n//2:] for i in range(n//2)]),
                           self.construct([grid[i][:n//2] for i in range(n//2, n)]),
                           self.construct([grid[i][n//2:] for i in range(n//2, n)]))
     
    def check_leaf(self, grid):
        aux_set = set()
        for i in range(len(grid)):
            for j in range(len(grid[0])):
                aux_set.add(grid[i][j])
                if len(aux_set) > 1:
                    return False
        return True
        
 429. N-ary Tree Level Order Traversal
 
 """
# Definition for a Node.
class Node(object):
    def __init__(self, val, children):
        self.val = val
        self.children = children
"""
from collections import deque, defaultdict
class Solution(object):
    def levelOrder(self, root):
        """
        :type root: Node
        :rtype: List[List[int]]
        """
        dic = defaultdict(list)
        queue = deque([root])
        queue2 = deque([0])
        while queue:
            node = queue.popleft()
            level = queue2.popleft()
            if node:
                dic[level].append(node.val)
                for child in node.children:
                    queue.append(child)
                    queue2.append(level+1)
        return [dic[k] for k in dic]
        
class Solution(object):
        
    def levelOrder(self, root):
        """
        :type root: Node
        :rtype: List[List[int]]
        """
        if not root:
            return []
        
        res = []
        ln = 0
        # list to associate each node with corresponding level
        lst = [(root, 0)]
        while lst:
            node, level = lst.pop()
            if ln == level:
                res.append([node.val])
                ln += 1
            else:
                res[level].append(node.val)
            lst.extend([ [child, level+1] for child in node.children[::-1] ])
        
        return res
        
  class Solution(object):
        
    def __init__(self):
        self.levels = []
        self.length = 0
        
    def levelTraverse(self, root, level):
        if level == self.length:
            self.levels.append([root.val])
            self.length += 1
        else:
            self.levels[level].append(root.val)
        
        for child in root.children:
            self.levelTraverse(child, level+1)
            
    def levelOrder(self, root):
        if not root:
            return []
        self.levelTraverse(root, 0)
        return self.levels
        
 434. Number of Segments in a String
 
 class Solution(object):
    def countSegments(self, s):
        """
        :type s: str
        :rtype: int
        """
        return len(s.split())
        
435. Non-overlapping Intervals

# Definition for an interval.
# class Interval:
#     def __init__(self, s=0, e=0):
#         self.start = s
#         self.end = e

class Solution:
    def eraseOverlapIntervals(self, intervals):
        """
        :type intervals: List[Interval]
        :rtype: int
        """
        intervals.sort(key=lambda interval: interval.end)
        res = 0
        end = -float('inf')
        for interval in intervals:
            if interval.start >= end:
                end = interval.end
            else:
                res += 1
        return res
        
class Solution:
    def eraseOverlapIntervals(self, intervals):
        """
        :type intervals: List[Interval]
        :rtype: int
        """
        intervals.sort(key=lambda interval: interval.end)
        res = 0
        end = float('-inf')
        for interval in intervals:
            if interval.start >= end:
                end = interval.end
            else:
                res += 1
        return res
        
437. Path Sum III

# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution:
    def pathSum(self, root, target):
        """
        :type root: TreeNode
        :type sum: int
        :rtype: int
        """
        self.numOfPaths = 0
        self.dfs(root, target)
        return self.numOfPaths
    
    def dfs(self, node, target):
        if node is None:
            return
        self.test(node, target)
        self.dfs(node.left, target)
        self.dfs(node.right, target)
        
    def test(self, node, target):
        if node is None:
            return
        if node.val == target:
            self.numOfPaths += 1
        self.test(node.left, target - node.val)
        self.test(node.right, target - node.val)
    
class Solution(object):
    def pathSum(self, root, target):
        # define global result and path
        self.result = 0
        cache = {0:1}
        
        # recursive to get result
        self.dfs(root, target, 0, cache)
        
        # return result
        return self.result
    
    def dfs(self, root, target, currPathSum, cache):
        # exit condition
        if root is None:
            return  
        # calculate currPathSum and required oldPathSum
        currPathSum += root.val
        oldPathSum = currPathSum - target
        # update result and cache
        self.result += cache.get(oldPathSum, 0)
        cache[currPathSum] = cache.get(currPathSum, 0) + 1
        
        # dfs breakdown
        self.dfs(root.left, target, currPathSum, cache)
        self.dfs(root.right, target, currPathSum, cache)
        # when move to a different branch, the currPathSum is no longer available, hence remove one. 
        cache[currPathSum] -= 1
        
 438. Find All Anagrams in a String
 
 class Solution(object):
    def findAnagrams(self, s, p):
        """
        :type s: str
        :type p: str
        :rtype: List[int]
        """
        if len(s) < len(p):
            return []
        dic1 = [0]*26
        dic2 = [0]*26
        res = []
        for i in range(len(p)):
            dic1[ord(p[i])-ord('a')] += 1
            dic2[ord(s[i])-ord('a')] += 1
        if dic1 == dic2:
            res.append(0)
        for i in range(1, len(s)-len(p)+1):
            dic2[ord(s[i-1])-ord('a')] -= 1
            dic2[ord(s[i+len(p)-1])-ord('a')] += 1
            if dic1 == dic2:
                res.append(i)
        return res
        
class Solution(object):
    def findAnagrams(self, s, p):
        """
        :type s: str
        :type p: str
        :rtype: List[int]
        """
        res = []
        n = len(s); m = len(p)
        if n < m:
            return []
        phash, shash = [0]*123, [0]*123
        for x in p:
            phash[ord(x)] += 1
        for x in s[:m-1]:
            shash[ord(x)] += 1
        for i in range(m-1, n):
            shash[ord(s[i])] += 1
            if i-m >=0:
                shash[ord(s[i-m])] -= 1
            if phash == shash:
                res.append(i-m+1)
        return res        
