741. Cherry Pickup

class Solution(object):
    def cherryPickup(self, grid):
        """
        :type grid: List[List[int]]
        :rtype: int
        """
        L = len(grid)
        dp = [[0 for _ in range(L)] for _ in range(L)]
        dp[0][0] = grid[0][0]
        for t in range(1,2*L-1):
            for i in range(L)[::-1]:
                for p in range(L)[::-1]:
                    j = t-i
                    q = t -p
                    if (j<0 or q <0 or j >= L or q >= L or grid[i][j] <0 or grid[p][q] < 0):
                        dp[i][p] = -1
                        continue
                    if i > 0:dp[i][p] = max(dp[i][p],dp[i-1][p])
                    if p > 0:dp[i][p] = max(dp[i][p],dp[i][p-1])
                    if i>0 and p>0:dp[i][p] = max(dp[i][p],dp[i-1][p-1])
                    if dp[i][p] >= 0:
                        second = grid[p][q] if i != p else 0
                        dp[i][p] += grid[i][j] + second
        return max(dp[-1][-1],0)
        
744. Find Smallest Letter Greater Than Target

class Solution:
    def nextGreatestLetter(self, letters, target):
        """
        :type letters: List[str]
        :type target: str
        :rtype: str
        """
        if target < letters[0]:
            return letters[0]
        if target >= letters[-1]:
            return letters[0]
        
        previous = -1
        current = 1
        stop = False
        while current < len(letters) and not stop:
            if letters[current] <= target:
                previous = current
                current = current + 1
            else:
                stop = True
        return letters[current]
        
746. Min Cost Climbing Stairs

class Solution:
    def minCostClimbingStairs(self, cost):
        """
        :type cost: List[int]
        :rtype: int
        """
        if not cost:
            return 
        n = len(cost)
        if n < 3:
            return 0
        cost.append(0)
        dp = [0]*(n+2)
        for j in range(3, n+2):
            dp[j] = min(dp[j-2] + cost[j-3], dp[j-1]+cost[j-2])
        return dp[-1]
    
# dp[j]:= cost of jumping up to position j

747. Largest Number At Least Twice of Others

class Solution:
    def dominantIndex(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        ls = len(nums)
        if ls == 1:
            return 0
        largest = max(nums)
        candidate_index = nums.index(largest)
        
        full_indices_set = set(range(ls))
        candidate_index_set = set([candidate_index])
        
        check_set = full_indices_set - candidate_index_set
        check_list = list(check_set)
        
        stop = False
        i = 0
        while i < len(check_list) and not stop:
            if (nums[check_list[i]])*2 <= largest:
                i += 1
            else:
                stop = True
                return -1
        return candidate_index
        
class Solution:
    def dominantIndex(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        nums1 = sorted(nums)
        largest = nums1[-1]
        ls = len(nums)
        if ls == 1:
            return 0
        i = 0
        stop = False
        while i < ls - 1 and not stop:
            if nums1[i]*2 > largest:
                stop = True
                return -1
            i += 1
        return nums.index(largest)
        
748. Shortest Completing Word

class Solution(object):
    def shortestCompletingWord(self, licensePlate, words):
        """
        :type licensePlate: str
        :type words: List[str]
        :rtype: str
        """
        candidates = []
        for word in words:
            if self.subject(licensePlate, word):
                candidates.append(word)
        smallest = min([len(x) for x in candidates])
        i = 0
        while i < len(candidates):
            if len(candidates[i]) == smallest:
                return candidates[i]
            else:
                i += 1
        return
        
        
        
    def to_dict(self, licensePlate):
        s = licensePlate.lower()
        aux_dict = dict()
        for item in s:
            if item not in "0123456789 ":
                if item not in aux_dict:
                    aux_dict[item] = 1
                else:
                    aux_dict[item] += 1
        return aux_dict
                
    def subject(self, licensePlate, word):
        
        aux_dict_1 = self.to_dict(licensePlate)
        if not aux_dict_1:
            return True
        aux_set_1 = set(aux_dict_1.keys())
        aux_dict_2 = self.to_dict(word)
        aux_set_2 = set(aux_dict_2.keys())
        if not aux_set_1.issubset(aux_set_2):
            return False
        else:
            
            for key in aux_dict_1.keys():
                if aux_dict_1[key] > aux_dict_2[key]:
                    return False
            return True
            
754. Reach a Number

class Solution:
    def reachNumber(self, target):
        """
        :type target: int
        :rtype: int
        """
        if target < 0:
            target = -target
        g = int(math.sqrt(target*2))
        while g*(g+1)//2 < target:
            g = g+1
        while (g*(g+1)//2 - target ) % 2 != 0 :
            g = g+1
            
        return g 
        
        

