623. Add One Row to Tree

class Solution:
    def addOneRow(self, root, v, d):
        """
        :type root: TreeNode
        :type v: int
        :type d: int
        :rtype: TreeNode
        """
        fake = TreeNode( None )
        fake.left = root
        def rec( n, h ):
            if n and h < d - 1:
                rec( n.left, h + 1 )
                rec( n.right, h + 1 )
            if n and h == d - 1:
                new_n = TreeNode( v )
                new_n.left = n.left
                n.left = new_n
                new_n = TreeNode( v )
                new_n.right = n.right
                n.right = new_n
        rec( fake, 0 )
        return fake.left
        
# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None
class Solution(object):
    def addOneRow( self, root, v, d ):
        fake = TreeNode( None )
        fake.left = root
        def rec( n, h ):
            if n and h < d - 1:
                rec( n.left, h + 1 )
                rec( n.right, h + 1 )
            if n and h == d - 1:
                new_n = TreeNode( v )
                new_n.left = n.left
                n.left = new_n
                new_n = TreeNode(v)
                new_n.right = n.right
                n.right = new_n
        rec( fake, 0 )
        return fake.left
        
class Solution(object):
    def addOneRow( self, root, v, d ):
        fake = TreeNode( None )
        fake.left = root
        def rec( n, h ):
            if n and h < d - 1:
                rec( n.left, h + 1 )
                rec( n.right, h + 1 )
            if n and h == d - 1:
                new_n = TreeNode( v )
                new_n.left = n.left
                n.left = new_n
                new_n = TreeNode(v)
                new_n.right = n.right
                n.right = new_n
        rec( fake, 0 )
        return fake.left
        
628. Maximum Product of Three Numbers

class Solution(object):
    def maximumProduct(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        nums.sort()
        
        n1 = nums[-1]*nums[-2]*nums[-3]
        n2 = nums[0]*nums[1]*nums[-1]
        n3 = nums[0]*nums[-1]*nums[-2]
        
        return max(n1, n2, n3)
        
633. Sum of Square Numbers

class Solution(object):
    def judgeSquareSum(self, c):
        """
        :type c: int
        :rtype: bool
        """
        
        if c == 0:
            return True
        
        from math import sqrt
        upper_bound = round(sqrt(c)) 
        
        small = 0
        large = upper_bound
        found = False
        while small <= large and not found:
            if small**2 + large**2 == c:
                found = True
            elif small**2 + large**2 < c:
                small += 1
            else:
                large -= 1
        return found
        
637. Average of Levels in Binary Tree

class Solution(object):
    def averageOfLevels(self, root):
        """
        :type root: TreeNode
        :rtype: List[float]
        """
        res = []
        stack = [(root, 0)]
        while stack:
            node, level = stack.pop()
            if node:
                if len(res) < level + 1:
                    res.insert(0, [])
                res[-(level+1)].append(node.val)
                stack.append((node.right, level + 1))
                stack.append((node.left, level + 1))
        return [float(sum(x))/len(x) for x in res if x!=[]][::-1]
        
# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution:
    def averageOfLevels(self, root):
        """
        :type root: TreeNode
        :rtype: List[float]
        """
        output = []
        child = [root, "X"]
        while len(child) != 1:
            x = child.index('X')
            for node in child[:x]:
                if node.left:
                    child.append(node.left)
                if node.right:
                    child.append(node.right)
            child.append("X")
            output.append(sum(c.val for c in child[:x])/len(child[:x]))
            child = child[x+1:]
        return output
        
class Solution:
    def averageOfLevels(self, root):
        """
        :type root: TreeNode
        :rtype: List[float]
        """
        if not root:
            return []
        my_list = []
        stack = []
        stack.append(root)
        while stack:
            temp_list = []
            temp_stack = []
            for i in stack:
                temp_list.append(i.val)
                if i.left:
                    temp_stack.append(i.left)
                if i.right:
                    temp_stack.append(i.right)
            if temp_list:
                my_list.append(sum(temp_list)/len(temp_list))
            stack = temp_stack
        return my_list
        
class Solution:
    def averageOfLevels(self, root):
        """
        :type root: TreeNode
        :rtype: List[float]
        """
        if not root:
            return []
        queue = [root, ]
        res = []
        while len(queue):
            length = len(queue)
            total = 0
            for i in range(length):
                node = queue.pop(0)
                total += node.val
                if node.left:
                    queue.append(node.left)
                if node.right:
                    queue.append(node.right)
            res.append(total/length)
        return res
        
class Solution(object):
    def averageOfLevels(self, root):
        """
        :type root: TreeNode
        :rtype: List[float]
        """
        each_level = [root]
        result = []
        if not root:
            return result
        while each_level:
            total = 0
            tmp = []
            for item in each_level:
                total += item.val
                if item.left:
                    tmp.append(item.left)
                if item.right:
                    tmp.append(item.right)
            avg = float(total)/float(len(each_level))
            result.append(avg)
            each_level = tmp
        return result
        
639. Decode Ways II

one = {'1': 1, '2': 1, '3': 1, '4': 1, '5': 1, '6': 1, '7': 1, '8': 1, '9': 1, '*': 9}
two = {'10': 1, '11': 1, '12': 1, '13': 1, '14': 1, '15': 1, '16': 1, '17': 1, '18': 1, '19': 1, '20': 1, '21': 1,
       '22': 1, '23': 1, '24': 1, '25': 1, '26': 1, '*0': 2, '*1': 2, '*2': 2, '*3': 2, '*4': 2, '*5': 2, '*6': 2,
       '*7': 1, '*8': 1, '*9': 1, '1*': 9, '2*': 6, '**': 15}
class Solution:
    def numDecodings(self, s):
        """
        :type s: str
        :rtype: int
        """        
        dp = 1, one.get(s[:1], 0)
    
        for i in range(1, len(s)):
            dp = dp[1], (one.get(s[i], 0) * dp[1] + two.get(s[i-1: i+1], 0) * dp[0]) % (10**9+7)
    
        return dp[-1]
        
one = {'1': 1, '2': 1, '3': 1, '4': 1, '5': 1, '6': 1, '7': 1, '8': 1, '9': 1, '*': 9}
two = {'10': 1, '11': 1, '12': 1, '13': 1, '14': 1, '15': 1, '16': 1, '17': 1, '18': 1, '19': 1, '20': 1, '21': 1,
       '22': 1, '23': 1, '24': 1, '25': 1, '26': 1, '*0': 2, '*1': 2, '*2': 2, '*3': 2, '*4': 2, '*5': 2, '*6': 2,
       '*7': 1, '*8': 1, '*9': 1, '1*': 9, '2*': 6, '**': 15}
class Solution:
    def numDecodings(self, s):
        """
        :type s: str
        :rtype: int
        """        
        dp = (1, 1)
        for i in range(len(s)-1, -1, -1):
            dp = ((one.get(s[i], 0)*dp[0] + two.get(s[i:i+2], 0)*dp[1])%(10**9 + 7), dp[0])
        return dp[0]
        
last_piece_length_1 = {'1': 1, '2': 1, '3': 1, '4': 1, '5': 1, '6': 1, '7': 1, '8': 1, '9': 1, '*': 9}
last_piece_length_2 = {'10': 1, '11': 1, '12': 1, '13': 1, '14': 1, '15': 1, '16': 1, '17': 1, '18': 1, '19': 1, '20': 1, '21': 1, '22': 1, '23': 1, '24': 1, '25': 1, '26': 1, '*0': 2, '*1': 2, '*2': 2, '*3': 2, '*4': 2, '*5': 2, '*6': 2,'*7': 1, '*8': 1, '*9': 1, '1*': 9, '2*': 6, '**': 15}
class Solution:
    def numDecodings(self, s):
        """
        :type s: str
        :rtype: int
        """        
        dp = [1]*(len(s)+2)
        for i in range(len(s)-1, -1, -1):
            dp[i] = (last_piece_length_1.get(s[i], 0)*dp[i+1] + last_piece_length_2.get(s[i:i+2], 0)*dp[i+2])%(10**9 + 7)
        return dp[0]        
        
        
