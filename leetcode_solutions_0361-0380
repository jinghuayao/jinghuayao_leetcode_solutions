367. Valid Perfect Square

class Solution(object):
    def isPerfectSquare(self, num):
        """
        :type num: int
        :rtype: bool
        """
        if num == 1:
            return True
        
        test = 1
        while test <= num//2 +1:
            if test **2 == num:
                return True
            elif test**2 < num:
                test += 1
            else:
                return False
                
class Solution:
    def isPerfectSquare(self, num):
        """
        :type num: int
        :rtype: bool
        """
        if num == 1:
            return True
        if num in [2, 3]:
            return False
        
        test = 2
        stop = False
        while test <= num//2 + 1 and not stop:
            if test**2 < num:
                test += 1
                
            elif test**2 == num:
                stop = True
                return True
            else:
                stop = True
                return False
                
 371. Sum of Two Integers
 
 class Solution:
    def getSum(self, a, b):
        """
        :type a: int
        :type b: int
        :rtype: int
        """

        return sum([a, b])
        
class Solution:
    def getSum(self, a, b):
        """
        :type a: int
        :type b: int
        :rtype: int
        """

        if a == -b:
            return 0
        if abs(a) > abs(b):
            a, b = b, a
        if a < 0:
            return -self.getSum(-a, -b)
        while b:
            c = a & b
            a ^= b
            b = c << 1
        return a
        
372. Super Pow

from math import log
class Solution:
    def superPow(self, a, b):
        """
        :type a: int
        :type b: List[int]
        :rtype: int
        """
        b = int("".join(map(str, b)))
        a = a % 1337
        return self.helper(a, b)
    
    def helper(self, a, b):
        if a == 0:
            return 0
        if a == 1:
            return 1
        if b == 1:
            return a % 1337
        if b % 2 == 0:
            coco = self.helper(a, b//2)
            return (coco*coco) % 1337
        if b % 2 == 1:
            coco = self.helper(a, b//2)
            return (coco*coco*a) % 1337
            
 374. Guess Number Higher or Lower
 
 # The guess API is already defined for you.
# @param num, your guess
# @return -1 if my number is lower, 1 if my number is higher, otherwise return 0
# def guess(num):

class Solution(object):
    def guessNumber(self, n):
        """
        :type n: int
        :rtype: int
        """
        low = 1
        high = n
        
        while low < high:
            mid = (low + high)//2
            if guess(mid) == 0:
                return mid
            elif guess(mid) == -1:
                high = mid - 1
            elif guess(mid) == 1:
                low = mid + 1
        return low
        
  class Solution(object):
    def guessNumber(self, n):
        """
        :type n: int
        :rtype: int
        """
        low = 1
        high = n
        
        while low < high:
            mid = (low + high)//2
            if guess(mid) == 0:
                return mid
            elif guess(mid) == -1:
                high = mid - 1
            elif guess(mid) == 1:
                low = mid + 1
        return low
        
 375. Guess Number Higher or Lower II
 
 class Solution(object):
    def getMoneyAmount(self, n):
        """
        :type n: int
        :rtype: int
        """
        dp = [[0 for _ in range(n+1)] for _ in range(n+1)]
        for start in range(1, n+1):
            for j in range(start, n+1):
                i = j - start
                dp[i][j] = min(i+dp[i+1][j], j+dp[i][j-1])
                for k in range(i+1, j):
                    dp[i][j] = min(dp[i][j], k+max(dp[i][k-1], dp[k+1][j]))
        return dp[1][n]
        
 class Solution(object):
    def getMoneyAmount(self, n):
        """
        :type n: int
        :rtype: int
        """
        memo = {}
        res = self.calculate(1, n, memo)
        return res

    def calculate(self, low, high, memo):
        if (low, high) in memo:
            return memo[(low, high)]
        if low >= high:
            return 0
        min_cost = float('inf')
        for i in range(low, high+1):
            res = i + max(self.calculate(low, i-1, memo), self.calculate(i+1, high, memo))
            min_cost = min(min_cost, res)
        memo[(low, high)] = min_cost
        return min_cost
        
 378. Kth Smallest Element in a Sorted Matrix
 
 class Solution:
    def kthSmallest(self, matrix, k):
        """
        :type matrix: List[List[int]]
        :type k: int
        :rtype: int
        """
        aux_list = []
        n = len(matrix[0])
        num_rows = min([k, n])
        for i in range(num_rows):
            for j in range(n):
                aux_list.append(matrix[i][j])
        aux_list.sort()
        return aux_list[k-1]
        
        
