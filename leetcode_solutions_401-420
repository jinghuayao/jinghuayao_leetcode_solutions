401 Binary Watch

# Use itertools.combinations
from itertools import combinations
class Solution:
    def readBinaryWatch(self, num):
        """
        :type num: int
        :rtype: List[str]
        """
        hours = list(map(lambda x: x*60, (1, 2, 4, 8)))
        minutes = (1, 2, 4, 8, 16, 32)
        res = []
        for i in range(num+1):
            get_hours = [x for x in list(combinations(hours, i)) if sum(x) < 12*60]
            get_minutes = [y for y in list(combinations(minutes, num-i)) if sum(y) < 60]
            minutes_group = [x+y for x in get_hours for y in get_minutes]
            res += ['{:d}:{:0>2d}'.format(sum(g)//60, sum(g)%60) for g in minutes_group]
        return res
        
# DFS 
class Solution(object):
        
    def readBinaryWatch(self, num):
        """
        :type num: int
        :rtype: List[str]
        """
        
        hours, minutes, result = [1, 2, 4, 8], [1, 2, 4, 8, 16 ,32], []
        self.dfs(num, hours, minutes, 0, 0, result)
        return result
    
    def dfs(self, num, hours, minutes, hour_try, min_try, result):
        if hour_try >= 12 or min_try >= 60:
            return
        if num == 0:
            minutes = hour_try * 60 + min_try
            result.append("%d:%02d" %(minutes // 60, minutes % 60))
            return
        if hours:
            self.dfs(num, hours[1:], minutes, hour_try, min_try, result) # hours[0] is not selected
            self.dfs(num - 1, hours[1:], minutes, hour_try + hours[0], min_try, result) # hours[0] is selected
        elif minutes:
            self.dfs(num, hours, minutes[1:], hour_try, min_try, result) # minutes[0] is not selected
            self.dfs(num - 1, hours, minutes[1:], hour_try, min_try + minutes[0], result) # minutes[0] is selected.
        return

404. Sum of Left Leaves

# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution:
    def sumOfLeftLeaves(self, root):
        """
        :type root: TreeNode
        :rtype: int
        """
        if not root:
            return 0
        
        res = []
        queue = [root]
        while queue:
            res.extend(queue)
            queue = [child for parent in queue for child in [parent.left, parent.right] if child]
        leaves = [node for node in res if self.is_leaf(root, node)]
        left_leaf_values = [node.val for node in leaves if self.is_left_leaf(root, node)]
        
        return sum(left_leaf_values)
        
 class Solution:
    def sumOfLeftLeaves(self, root):
        """
        :type root: TreeNode
        :rtype: int
        """
        if not root:
            return 0
        
        elif root.left and (not root.left.left) and (not root.left.right) :
            
            return root.left.val + self.sumOfLeftLeaves(root.right)
        else:
            return self.sumOfLeftLeaves(root.left) + self.sumOfLeftLeaves(root.right)
            
# DFS
class Solution:
    def sumOfLeftLeaves(self, root):
        """
        :type root: TreeNode
        :rtype: int
        """
        b = []
        a = self.isleaf(root, b)
        print(a)
        res = 0
        for i in range(len(a)):
            res += a[i]
        return res
    
    def isleaf(self, root, a):
        if not root:
            return a
        elif root.left and (not root.left.left and not root.left.right):
            a.append(root.left.val)
        self.isleaf(root.left, a)
        self.isleaf(root.right, a)
        return a
        
 405. Convert a Number to Hexadecimal
 
 class Solution:
    def toHex(self, num):
        """
        :type num: int
        :rtype: str
        """
        hex_16 = '0123456789abcdef'
        if num == 0:
            return "0"
        if num < 0:
            num = 2**32 - abs(num)
        hold = []
        while num > 0:
            hold.append(hex_16[num%16])
            num //= 16
        hold = hold[::-1]
        
        res = ""
        for item in hold:
            res += str(item)
            
        return res
        
 409. Longest Palindrome
 
 class Solution:
    def longestPalindrome(self, s):
        """
        :type s: str
        :rtype: int
        """
        aux_dict = dict()
        for item in s:
            if item not in aux_dict:
                aux_dict[item] = 1
            else:
                aux_dict[item] += 1
        large_values = [v for k, v in aux_dict.items() if v > 1]
        small_values = [v for k, v in aux_dict.items() if v==1]
        
        aux_list = []
        for item in large_values:
            if item % 2 == 0:
                aux_list.append(item)
            else:
                aux_list.append(item-1)
                
        total = sum(aux_list)
        
        remainder_list = [a-b for a, b in zip(large_values, aux_list)]
        
        if sum(remainder_list) == 0 and sum(small_values) == 0:
                return total
        else:
            return total + 1
            
class Solution:
    def longestPalindrome(self, s):
        """
        :type s: str
        :rtype: int
        """
        res, lookup, single = 0, dict(), 0
        
        for ch in s:
            if ch not in lookup:
                lookup[ch] = 1
            else:
                lookup[ch] += 1
        
        for key in lookup.keys():
            if lookup[key] % 2 == 0:
                res += lookup[key]
            else:
                res += lookup[key] - 1
                single = 1
        return res + single
        
412. Fizz Buzz

class Solution:
    def fizzBuzz(self, n):
        """
        :type n: int
        :rtype: List[str]
        """
        lst = []
        for i in range(1, n+1):
            if i%3 == 0:
                if i%5 != 0:
                    lst.append("Fizz")
                else:
                    lst.append("FizzBuzz")
            else:
                if i%5 == 0:
                    lst.append("Buzz")
                else:
                    lst.append(str(i))
        return lst
        
414. Third Maximum Number

class Solution:
    def thirdMax(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        set_nums = set(nums)
        if len(set_nums) < 3:
            return max(nums)
        lst  = []
        for item in set_nums:
            lst.append(item)
        lst.sort(reverse=True)
        return lst[2]
        
415. Add Strings

class Solution(object):
    def addStrings(self, num1, num2):
        """
        :type num1: str
        :type num2: str
        :rtype: str
        """
        num1_list = [num for num in num1]
        num2_list = [num for num in num2]
        length_1 = len(num1_list)
        length_2 = len(num2_list)
        
        num1_value = 0
        for i in range(length_1):
            num1_value += int(num1_list[i])*10**(length_1 - 1 - i)
        
        num2_value = 0
        for i in range(length_2):
            num2_value += int(num2_list[i])*10**(length_2 - 1 - i)
        
        res = num1_value + num2_value
        return str(res)
        
416. Partition Equal Subset Sum

class Solution:
    def canPartition(self, nums):
        """
        :type nums: List[int]
        :rtype: bool
        """
        total = sum(nums)
        if total % 2 != 0: return False
        target = total//2
        s = {target}
        for i in range(len(nums)):
            if nums[i] in s:
                return True
            else:
                to_add = set()
                for ele in s:
                    if ele >= nums[i]:
                        to_add.add(ele-nums[i])
                s = s.union(to_add)
        
        return False
        
class Solution:
    def canPartition(self, nums):
        """
        :type nums: List[int]
        :rtype: bool
        """
        s = sum(nums)
        if s % 2 != 0: return False
        return self.canFindSum(nums, s//2, 0, len(nums), dict())
        
        
    def canFindSum(self, nums, target, ind, n, d):
        if target in d: return d[target]
        if target == 0: d[target] = True
        else:
            d[target] = False
            if target > 0:
                for i in range(ind, n):
                    if self.canFindSum(nums, target-nums[i], i+1, n, d):
                        d[target] = True
                        break
        return d[target]

# Above Backtracking with memoization

class Solution(object):
    def canPartition(self, nums):
        """
        :type nums: List[int]
        :rtype: bool
        """
        total = sum(nums)
        if total % 2 != 0: return False
        aux_set = set()
        aux_set.add(total//2)
        
        for num in nums:
            if num in aux_set:
                return True
            else:
                to_add = set()
                for ele in aux_set:
                    if ele >= num:
                        to_add.add(ele-num)
                aux_set.update(to_add)
        return False
        
        
