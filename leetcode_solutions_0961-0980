961. N-Repeated Element in Size 2N Array

class Solution:
    def repeatedNTimes(self, A):
        """
        :type A: List[int]
        :rtype: int
        """
        d = collections.Counter(A)
        n = len(A)
        for key in d:
            if d[key] == n//2:
                return key
                
 class Solution:
    def repeatedNTimes(self, A):
        """
        :type A: List[int]
        :rtype: int
        """
        d = dict()
        for num in A:
            if num not in d:
                d[num] = 1
            else:
                d[num] += 1
        for key in d:
            if d[key] == len(A)//2:
                return key
                
 class Solution:
    def repeatedNTimes(self, A):
        """
        :type A: List[int]
        :rtype: int
        """
        return (sum(A) - sum(set(A)))//(len(A)//2 - 1)
        
from random import sample
class Solution:
    def repeatedNTimes(self, A):
        """
        :type A: List[int]
        :rtype: int
        """
        while True:
            s = sample(A, 2)
            if s[0] == s[1]:
                return s[0]
                
 962. Maximum Width Ramp
 
 # Decreasing stack and binary search
 class Solution(object):
    def maxWidthRamp(self, A):
        """
        :type A: List[int]
        :rtype: int
        """
        stack = []
        res = 0
        for i, a in enumerate(A):
            if not stack or a < stack[-1][0]:
                stack.append((a, i))   
            res = max(res, i - self.binarySearch(stack, a))
        return res
    
    def binarySearch(self, stack, target):
            left = 0
            right = len(stack) - 1 
            while left <= right:
                mid = (left + right) // 2
                if stack[mid][0] > target:
                    left = mid + 1
                else:
                    right = mid - 1
            return stack[left][1]
            
 # dict
 class Solution(object):
    def maxWidthRamp(self, A):
        """
        :type A: List[int]
        :rtype: int
        """
        aux_dict = dict()
        for idx, num in enumerate(A):
            if num not in aux_dict:
                aux_dict[num] = [idx]
            else:
                aux_dict[num].append(idx)
        min_idx = 50000
        max_width = 0
        for num, idx_list in sorted(aux_dict.items()):
            min_idx = min(min_idx, idx_list[0])
            max_width = max(idx_list[-1] - min_idx, max_width)
        return max_width
        
class Solution(object):
    def maxWidthRamp(self, A):
        """
        :type A: List[int]
        :rtype: int
        """
        aux_dict = collections.defaultdict(list)
        for idx, num in enumerate(A):
            aux_dict[num].append(idx)
        min_idx = 50000
        max_width = 0
        for num, idx_list in sorted(aux_dict.items()):
            min_idx = min(min_idx, idx_list[0])
            max_width = max(idx_list[-1] - min_idx, max_width)
        return max_width

965. Univalued Binary Tree

# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

# Traversal, sort of brute force
class Solution:
    def isUnivalTree(self, root):
        """
        :type root: TreeNode
        :rtype: bool
        """
        return len(set(self.inorder(root))) == 1
       
    def inorder(self, root):
        if not root:
            return []
        else:
            return self.inorder(root.left) + [root.val] + self.inorder(root.right)
            
# Use set and traversal
class Solution:
    def isUnivalTree(self, root):
        """
        :type root: TreeNode
        :rtype: bool
        """
        aux_set = set()
        queue = [root]
        while queue:
            node = queue.pop(0)
            aux_set.add(node.val)
            if len(aux_set)>1:
                return False
            else:
                if node.left:
                    queue.append(node.left)
                if node.right:
                    queue.append(node.right)
        return True 
 
 # BFS
 class Solution:
    def isUnivalTree(self, root):
        """
        :type root: TreeNode
        :rtype: bool
        """
        value = root.val
        queue = [root]
        while queue:
            node = queue.pop(0)
            if node.val != value:
                return False
            else:
                if node.left:
                    queue.append(node.left)
                if node.right:
                    queue.append(node.right)
        return True

# DFS
class Solution(object):
    def isUnivalTree(self, root):
        vals = []

        def dfs(node):
            if node:
                vals.append(node.val)
                dfs(node.left)
                dfs(node.right)

        dfs(root)
        return len(set(vals)) == 1

# Recusion
class Solution:
    def isUnivalTree(self, root):
        """
        :type root: TreeNode
        :rtype: bool
        """
        left_right = (not root.left) or (root.left.val == root.val and self.isUnivalTree(root.left))
        right_right = (not root.right) or (root.right.val == root.val and self.isUnivalTree(root.right))
        
        
        return left_right and right_right
        
972. Equal Rational Numbers

class Solution:
    def powerfulIntegers(self, x, y, bound):
        """
        :type x: int
        :type y: int
        :type bound: int
        :rtype: List[int]
        """
        if bound < 2:
            return []
        if x == 1:
            x_bound = 1
        else:
            x_bound = int(math.log(bound, x)) + 1
        if y == 1:
            y_bound = 1
        else:
            y_bound = int(math.log(bound, y)) + 1
        aux_set = set()
        for i in range(x_bound):
            for j in range(y_bound):
                test = x**i + y**j
                if test <= bound:
                    aux_set.add(test)
        return list(aux_set)  
        
973. K Closest Points to Origin

class Solution:
    def kClosest(self, points, K):
        """
        :type points: List[List[int]]
        :type K: int
        :rtype: List[List[int]]
        """
        return sorted(points, key=lambda P: P[0]**2 + P[1]**2)[:K]
